ALGORITHM findCycle(G):
	// Finds a cycle in a graph using depth-first search
	// Input: Graph, "G", which contains a vertex set G.V and an edge set G.E
	// Output: An array of edges that form a cycle
	ALGORITHM hasCycle(path):
		// Determines whether an array of nodes which forms a path contains a cycle
		// Input: Array of nodes, "path".
		// Output: Boolean
		return path[-1] in path[:-1]

	for each vertex in G.V:
		paths <- [[vertex]]
		while paths is not empty:
			currentPath <- dequeue(paths)

			if hasCycle(currentPath):
				lastVertexIndex <- index(currentPath, currentPath[-1])
				return currentPath[lastVertexIndex:]

			lastVertex <- currentPath[-1]
			// neighborhood(G, v) returns the neighbors of v in G
			for each neighbor in neighborhood(G, lastVertex):
				newPath <- append(currentPath, neighbor)
				paths <- append(paths, newPath)

	return []
